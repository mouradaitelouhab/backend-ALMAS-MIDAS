const mongoose = require('mongoose');
const { mockUsers, mockProducts, mockCategories } = require('../populateDB');

// Import models
const User = require('../models/User');
const Product = require('../models/Product');
const Category = require('../models/Category');

/**
 * Script pour peupler MongoDB Atlas avec les donn√©es de test
 * Utilise la m√™me logique que populateDB.js mais avec gestion d'erreurs am√©lior√©e
 */
const populateAtlas = async () => {
  try {
    // Configuration des URIs de connexion
    const ATLAS_URI = process.env.MONGODB_ATLAS_URI || process.env.MONGO_ATLAS_URI;
    const LOCAL_URI = process.env.MONGO_URI || process.env.MONGODB_URI || 'mongodb://localhost:27017/almasdimas';
    
    if (!ATLAS_URI) {
      console.log('‚ö†Ô∏è  MONGODB_ATLAS_URI non d√©finie, utilisation de la base locale');
    }

    // Options de connexion optimis√©es
    const connectionOptions = {
      serverSelectionTimeoutMS: 15000,
      socketTimeoutMS: 45000,
      maxPoolSize: 10,
      retryWrites: true,
      w: 'majority'
    };

    // Tentative de connexion √† Atlas d'abord, puis local
    let connected = false;
    let connectionSource = '';

    if (ATLAS_URI) {
      try {
        console.log('üåê Connexion √† MongoDB Atlas...');
        await mongoose.connect(ATLAS_URI, connectionOptions);
        connected = true;
        connectionSource = 'MongoDB Atlas';
        console.log('‚úÖ Connect√© √† MongoDB Atlas avec succ√®s');
      } catch (error) {
        console.log('‚ùå √âchec de connexion √† Atlas:', error.message);
        console.log('üîÑ Tentative de connexion locale...');
      }
    }

    if (!connected) {
      try {
        await mongoose.connect(LOCAL_URI, connectionOptions);
        connected = true;
        connectionSource = 'MongoDB Local';
        console.log('‚úÖ Connect√© √† MongoDB local avec succ√®s');
      } catch (error) {
        console.error('‚ùå Impossible de se connecter √† MongoDB:', error.message);
        process.exit(1);
      }
    }

    console.log(`üìä Source de donn√©es: ${connectionSource}`);
    console.log(`üìä Base de donn√©es: ${mongoose.connection.name}`);

    // V√©rifier si les donn√©es existent d√©j√†
    const existingProducts = await Product.countDocuments();
    const existingCategories = await Category.countDocuments();
    const existingUsers = await User.countDocuments();

    console.log(`üìä Donn√©es existantes: ${existingProducts} produits, ${existingCategories} cat√©gories, ${existingUsers} utilisateurs`);

    // Peupler les cat√©gories si elles n'existent pas
    if (existingCategories === 0) {
      console.log('üìù Ajout des cat√©gories...');
      try {
        // Ins√©rer une par une pour √©viter les conflits de slug
        for (const category of mockCategories) {
          try {
            await Category.create(category);
          } catch (error) {
            if (error.code === 11000) {
              console.log(`‚ö†Ô∏è  Cat√©gorie "${category.categoryName}" d√©j√† existante, ignor√©e`);
            } else {
              throw error;
            }
          }
        }
        console.log(`‚úÖ Cat√©gories trait√©es avec succ√®s`);
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'ajout des cat√©gories:', error.message);
      }
    } else {
      console.log('‚ÑπÔ∏è  Cat√©gories d√©j√† pr√©sentes, passage ignor√©');
    }

    // Peupler les utilisateurs si ils n'existent pas
    if (existingUsers === 0) {
      console.log('üë• Ajout des utilisateurs...');
      try {
        // Ins√©rer un par un pour √©viter les conflits
        for (const user of mockUsers) {
          try {
            await User.create(user);
          } catch (error) {
            if (error.code === 11000) {
              console.log(`‚ö†Ô∏è  Utilisateur "${user.email}" d√©j√† existant, ignor√©`);
            } else {
              throw error;
            }
          }
        }
        console.log(`‚úÖ Utilisateurs trait√©s avec succ√®s`);
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'ajout des utilisateurs:', error.message);
      }
    } else {
      console.log('‚ÑπÔ∏è  Utilisateurs d√©j√† pr√©sents, passage ignor√©');
    }

    // Peupler les produits si ils n'existent pas
    if (existingProducts === 0) {
      console.log('üõçÔ∏è  Ajout des produits...');
      try {
        // Ins√©rer par lots pour optimiser
        await Product.insertMany(mockProducts, { ordered: false });
        console.log(`‚úÖ ${mockProducts.length} produits ajout√©s`);
      } catch (error) {
        if (error.name === 'MongoBulkWriteError') {
          const insertedCount = error.result.insertedCount;
          console.log(`‚úÖ ${insertedCount} produits ajout√©s (certains ignor√©s car d√©j√† existants)`);
        } else {
          throw error;
        }
      }
    } else {
      console.log('‚ÑπÔ∏è  Produits d√©j√† pr√©sents, passage ignor√©');
    }

    // Statistiques finales
    const finalProducts = await Product.countDocuments();
    const finalCategories = await Category.countDocuments();
    const finalUsers = await User.countDocuments();

    console.log('\nüìä STATISTIQUES FINALES:');
    console.log(`   ‚Ä¢ Produits: ${finalProducts}`);
    console.log(`   ‚Ä¢ Cat√©gories: ${finalCategories}`);
    console.log(`   ‚Ä¢ Utilisateurs: ${finalUsers}`);
    console.log(`   ‚Ä¢ Source: ${connectionSource}`);

    console.log('\n‚úÖ Population de la base de donn√©es termin√©e avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors du peuplement:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  } finally {
    // Fermer la connexion
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
      console.log('üîå Connexion ferm√©e');
    }
  }
};

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  populateAtlas();
}

module.exports = { populateAtlas };
